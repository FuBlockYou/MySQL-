两大日志模块：Redo Log 和 BinLog

Redo Log(InnoDB引擎)

    1.Redo Log 是物理日志，记录的是某个页做了什么改动，大小固定，底层数据结构是循环链表，当空间不够时，
    会覆盖以前的记录。

    2.Redo Log  使得InnoDB引擎在数据库发生异常重启的时候，之前提交的记录都不会丢失，故称之为 crash-safe


    3.Redo Log 使用的是WAL技术（先写日志，再写磁盘）

    4.redo log 用于保证 crash-safe 能力，
    innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。
    （建议设置为1）

    5.sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。（建议设置为1）




BinLog (server层日志）归档日志

    1.BinLog 无crash-safe能力

    2.BinLog 记录的是语句的原始逻辑
    
    3.BinLog 是逻辑日志

    4.BinLog 有两种模式（statement 格式 和 row模式）
    statement 格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。

    5.BinLog 可以在各种引擎中使用


两种日志的不同:

    1.redo log 是 InnoDB 引擎特有的;binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。

    2.redo log 是物理日志，记录的是“在某个数据页上做了什修改”；
      binlog 是逻辑日志，记录的是这个语句的原始逻辑。

    3.redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的，“追加写”是指 binlog 文
      件写到一定大小后会切换到下一个，并不会覆盖以前的日志。

两阶段提交：

    1.写redo log 并让redo log 处于prepare状态

    2.写binlog

    3.commit事务

两阶段提交的目的：

    1.使两个日志保持逻辑上的一致。

    2.两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案


小结：
    1.redo是物理的，binlog是逻辑的；现在由于redo是属于InnoDB引擎，所以必须要有binlog，因为你
    可以使用别的引擎。

    2.保证数据库的一致性，必须要保证2份日志一致，使用的2阶段式提交；其实感觉像事务，不是成功就是
    失败，不能让中间环节出现，也就是一个成功，一个失败。

    3.如果有一天mysql只有InnoDB引擎了，有redo来实现复制，那么感觉oracle的DG就诞生了，物理的速度
    也将远超逻辑的，毕竟只记录了改动向量

    4.binlog几大模式，一般采用row，因为遇到时间，从库可能会出现不一致的情况，但是row更新前后都有，
    会导致日志变大。

    5.redolog 的2个参数，保证事务成功，日志必须落盘，这样，数据库crash后，就不会丢失某个事务的
    数据了。
    
    6.Bin log 用于记录了完整的逻辑记录，所有的逻辑记录在 bin log 里都能找到，所以在备份恢复时，是
    以 bin log 为基础，通过其记录的完整逻辑操作，备份出一个和原库完整的数据。

    7.redo log 记录的，即使异常重启，都会刷新到磁盘，而 bin log 记录的， 则主要用于备份。


定期全量备份的周期：
        首先，是恢复数据丢失的时间，既然需要恢复，肯定是数据丢失了。如果一天一备份的话，只要找到这天的全备，
    加入这天某段时间的binlog来恢复，如果一周一备份，假设是周一，而你要恢复的数据是周日某个时间点，那就，需
    要全备+周一到周日某个时间点的全部binlog用来恢复，时间相比前者需要增加很多；看业务能忍受的程度。

        其次，是数据库丢失，如果一周一备份的话，需要确保整个一周的binlog都完好无损，否则将无法恢复；
    而一天一备，只要保证这天的binlog都完好无损；当然这个可以通过校验，或者冗余等技术来实现，相比之下，上
    面那点更重要。
















