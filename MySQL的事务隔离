事务隔离：为什么你改了我看不见？

事务的作用：
    事务就是要保证一组数据库操作，要么全部成功，要么全部失败。

    在 MySQL 中，事务支持是在引擎层实现的。

MySQL是一个支持多引擎的系统，但并不是所有引擎都支持事务:

    MySQL 原生的MylSAM引擎就不支持事务。

事务的隔离性与隔离级别：

    ACID：
    Atomicity  原子性
    Consistency 一致性
    Isolation 隔离性
    Durability 持久性

    。事务执行时可能发生的异常情况：

        脏读（dirty read）：
        当数据库中一个事务A正在修改一个数据但是还未提交或者回滚，另一个事务B 来读取了修改后的内容并且使用了，之后事务A
        提交了，此时就引起了脏读。 
        此情况仅会发生在： 读未提交的的隔离级别.

        不可重复读（non-repeatable read）:
        在一个事务A中多次操作数据，在事务操作过程中(未最终提交)，事务B也才做了处理，并且该值发生了改变，这时候就会
        导致A在事务操作的时候，发现数据与第一次不一样了。 就是不可重复读。

        此情况仅会发生在：读未提交、读提交的隔离级别.

        幻读（phantom read):
        一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为幻读。
        幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部
        数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的
        用户发现表中还存在没有修改的数据行，就好象发生了幻觉一样.一般解决幻读的方法是增加范围锁RangeS，锁定检索范围为只读，
        这样就避免了幻读。

        此情况会发生在：读未提交、读提交、可重复读的隔离级别.
    
    。隔离级别
        隔离级别越高，效率越低

        SQL标准的事务隔离级别：

        读未提交（read uncommitted）：一个事务还没提交时，它做的变更就能被别的事务看到。

        读提交（read committed）：一个事务提交之后，它做的变更才会被其他事务看到。

        可重复读（repeatable read）：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。
        当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。

        串行化（serializable ）：顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，
        后访问的事务必须等前一个事务执行完成，才能继续执行。

事务隔离的实现(以可重复读为例)：
    每条记录在更新的时候都会同时记录一条回滚操作。同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。


事务的启动方式：

    1.显示启动事务语句

    2.set autocommit = 0 

总结：
    1、务的特性：原子性、一致性、隔离性、持久性
    2、多事务同时执行的时候，可能会出现的问题：脏读、不可重复读、幻读
    3、事务隔离级别：读未提交、读提交、可重复读、串行化
    4、不同事务隔离级别的区别：
        读未提交：一个事务还未提交，它所做的变更就可以被别的事务看到    
        读提交：一个事务提交之后，它所做的变更才可以被别的事务看到
        可重复读：一个事务执行过程中看到的数据是一致的。未提交的更改对其他事务是不可见的
        串行化：对应一个记录会加读写锁，出现冲突的时候，后访问的事务必须等前一个事务执行完成才能继续执行
    5、配置方法：启动参数transaction-isolation
    6、事务隔离的实现：
    每条记录在更新的时候都会同时记录一条回滚操作。同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。
    7、回滚日志什么时候删除？
    系统会判断当没有事务需要用到这些回滚日志的时候，回滚日志会被删除。
    8、什么时候不需要了？
    当系统里么有比这个回滚日志更早的read-view的时候。
    9、为什么尽量不要使用长事务。
    长事务意味着系统里面会存在很老的事务视图，在这个事务提交之前，回滚记录都要保留，这会导致大量占用存储空间。除此之外，
    长事务还占用锁资源，可能会拖垮库。
    10、事务启动方式：
    一、显式启动事务语句，begin或者start transaction,提交commit，回滚rollback；
    二、set autocommit=0，该命令会把这个线程的自动提交关掉。这样只要执行一个select语句，事务就启动，并不会自动提交，
    直到主动执行commit或rollback或断开连接。

    11、建议使用方法一，如果考虑多一次交互问题，可以使用commit work and chain语法。
    在autocommit=1的情况下用begin显式启动事务，如果执行commit则提交事务。
    如果执行commit work and chain则提交事务并自动启动下一个事务。











